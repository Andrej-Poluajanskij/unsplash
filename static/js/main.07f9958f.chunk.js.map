{"version":3,"sources":["../../unsplash/src/components/container/preloadComponent/Preload.js","../../unsplash/src/components/container/modalWindowComp/ModalWindow.js","../../unsplash/src/components/container/Container.js","../../unsplash/src/App.js","../../unsplash/src/serviceWorker.js","../../unsplash/src/index.js"],"names":["Preload","_this","this","react_default","a","createElement","className","ref","c","preload","Component","ModalWindow","modalWindow","style","display","props","visibility","notFound","onClick","closeWindow","unsplash","Unsplash","applicationId","secret","Container","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getInputValue","element","image","refs","src","setState","search","photos","then","toJson","json","undefined","results","concat","alertWindow","jsonData","urls","regular","state","url","queries","toConsumableArray","mySearch","value","_this2","alert","window","onclick","event","target","_this3","ModalWindow_ModalWindow","placeholder","Preload_Preload","onLoad","imageLoaded","bind","alt","saveQuery","map","item","i","key","App","components_container_Container","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.07f9958f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './preload.scss'\r\n\r\nexport default class Preload extends Component{\r\n\r\n    render(){\r\n\r\n        return(\r\n          <div className=\"preload\" ref={(c) => this.preload = c } >\r\n            <div className=\"spring-spinner\">\r\n              <div className=\"spring-spinner-part top\">\r\n                <div className=\"spring-spinner-rotator\"></div>\r\n              </div>\r\n              <div className=\"spring-spinner-part bottom\">\r\n                <div className=\"spring-spinner-rotator\"></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './modalWindow.scss'\r\n\r\nexport default class ModalWindow extends Component{\r\n\r\n    closeWindow(){\r\n        const alert = this.modalWindow;\r\n        alert.style.display = 'none';\r\n\r\n        this.props.preload.preload.style.visibility = 'hidden';\r\n      }\r\n    \r\n    render(){\r\n        \r\n        return(\r\n            <div className=\"modal-window\" ref={(c) => this.modalWindow = c }>\r\n                <div className=\"alert-window\">\r\n                    <p>{this.props.notFound}</p>\r\n                    <button onClick={() => this.closeWindow()}>OK</button>\r\n                </div>\r\n          </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './Container.scss';\r\nimport Preload from './preloadComponent/Preload'\r\nimport ModalWindow from './modalWindowComp/ModalWindow'\r\n\r\nimport Unsplash, { toJson } from 'unsplash-js';\r\n\r\nconst unsplash = new Unsplash({\r\n  applicationId: \"25c4b86197be0779561a0ff1c4f13d059722ef8eba998d4d13aa2939c8643800\",\r\n  secret: \"cfe6fc2b39ea3d065aa4bf49a515b3e27f6aeb9d7c179f96a2b0fbca6ab82fdf\"\r\n});\r\n\r\n\r\nclass Container extends Component{\r\n  constructor(){\r\n    super()\r\n    this.state = { queries: [], url: [], notFound: '', preload:{} }\r\n  \r\n  }\r\n  \r\n  getInputValue = (element) => {\r\n    const image = this.refs.image\r\n    image.src = '' ;\r\n    \r\n    this.preload.preload.style.visibility = 'visible';\r\n\r\n    this.setState({\r\n      preload: this.preload\r\n    }) \r\n        \r\n        unsplash.search.photos(element, 1)\r\n        .then(toJson)\r\n        .then(json => {\r\n          if(json.results[0] === undefined ){\r\n           \r\n            if(element === ''){\r\n              this.setState({\r\n                notFound: `Search window is empty`\r\n              })\r\n            }else{\r\n              this.setState({\r\n                notFound: `${element} not found`\r\n              })\r\n            }\r\n           \r\n            this.alertWindow()\r\n\r\n          } else {\r\n            let jsonData = json.results[0].urls.regular;\r\n\r\n            if (jsonData === this.state.url) {\r\n                image.src=this.state.url\r\n            } else {\r\n              this.setState({\r\n                url: jsonData\r\n              })\r\n            }\r\n        }\r\n        });\r\n      }\r\n\r\n\r\n    saveQuery(element){\r\n \r\n      if(element !== ''){\r\n        this.setState({\r\n          queries: [...this.state.queries, element]\r\n        })\r\n      }\r\n\r\n      this.refs.mySearch.value = ''\r\n      }\r\n\r\n    alertWindow(){\r\n      const alert = this.modalWindow.modalWindow;\r\n      alert.style.display = 'block'\r\n\r\n      window.onclick = (event) => {\r\n        if (event.target === alert) {\r\n          alert.style.display = \"none\";\r\n          this.preload.preload.style.visibility = 'hidden';\r\n        }\r\n      }\r\n    }\r\n\r\n    closeWindow(){\r\n      const alert = this.refs.modalWindow;\r\n      alert.style.display = 'none';\r\n\r\n      this.preload.preload.style.visibility = 'hidden';\r\n    }\r\n\r\n    imageLoaded(){\r\n      this.preload.preload.style.visibility = 'hidden';\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"container\">\r\n              <ModalWindow ref={(c) => this.modalWindow = c }\r\n               preload={this.state.preload} notFound={this.state.notFound} />\r\n           \r\n                <div className=\"content\">\r\n\r\n                    <div className=\"content-left\">\r\n\r\n                        <input className=\"input\" placeholder=\"Search photo\" ref=\"mySearch\" />\r\n                        <div className=\"img\" >\r\n\r\n                          <Preload ref={(c) => this.preload = c} /> \r\n                          <img ref=\"image\" className=\"image\" src={this.state.url}\r\n                           onLoad={this.imageLoaded.bind(this)} alt=\"\"/>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"content-right\">\r\n                        <div className=\"buttons\">\r\n                            <button onClick={() => this.getInputValue(this.refs.mySearch.value)}>Search</button>\r\n                            <button onClick={() => this.saveQuery(this.refs.mySearch.value)}>Save</button>\r\n                        </div>\r\n                        <div className=\"saved-queries\">\r\n                             <ul>\r\n                                { this.state.queries.map( (item, i) =>  {\r\n                                    return <li key={i} onClick={() => this.getInputValue(item)} >{item}</li>\r\n                                 })}\r\n                             </ul>\r\n                        </div>\r\n                    </div>\r\n              \r\n              </div>\r\n            </div>\r\n          );\r\n    }\r\n}\r\n\r\nexport default Container","import React, { Component } from 'react';\n\nimport Container from './components/container/Container'\n\n\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div className=\"App \" >\n         <Container  /> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}